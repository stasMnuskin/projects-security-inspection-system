/api/faults:
  post:
    summary: Create a new fault
    tags: [Faults]
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - siteId
              - inspectionTypeId
              - parameter
            properties:
              siteId:
                type: integer
              inspectionTypeId:
                type: integer
              parameter:
                type: string
              description:
                type: string
              severity:
                type: string
                enum: [low, medium, high, critical]
    responses:
      201:
        description: Fault created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fault'
      400:
        description: Bad request
      401:
        description: Unauthorized
      403:
        description: Forbidden

  get:
    summary: Get all faults
    tags: [Faults]
    security:
      - bearerAuth: []
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [open, closed]
      - in: query
        name: siteId
        schema:
          type: integer
      - in: query
        name: severity
        schema:
          type: string
          enum: [low, medium, high, critical]
    responses:
      200:
        description: Successful response
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Fault'
      401:
        description: Unauthorized

/api/faults/{id}:
  get:
    summary: Get a specific fault
    tags: [Faults]
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Successful response
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fault'
      401:
        description: Unauthorized
      404:
        description: Fault not found

  put:
    summary: Update a fault
    tags: [Faults]
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              description:
                type: string
              severity:
                type: string
                enum: [low, medium, high, critical]
              status:
                type: string
                enum: [open, closed]
    responses:
      200:
        description: Fault updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fault'
      400:
        description: Bad request
      401:
        description: Unauthorized
      403:
        description: Forbidden
      404:
        description: Fault not found

/api/faults/{id}/close:
  put:
    summary: Close a fault
    tags: [Faults]
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              resolutionNotes:
                type: string
    responses:
      200:
        description: Fault closed successfully
      401:
        description: Unauthorized
      403:
        description: Forbidden
      404:
        description: Fault not found

/api/faults/by-date-range:
  get:
    summary: Get faults by date range
    tags: [Faults]
    security:
      - bearerAuth: []
    parameters:
      - in: query
        name: startDate
        required: true
        schema:
          type: string
          format: date
      - in: query
        name: endDate
        required: true
        schema:
          type: string
          format: date
    responses:
      200:
        description: Successful response
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Fault'
      400:
        description: Bad request
      401:
        description: Unauthorized

/api/faults/statistics:
  get:
    summary: Get fault statistics
    tags: [Faults]
    security:
      - bearerAuth: []
    responses:
      200:
        description: Successful response
        content:
          application/json:
            schema:
              type: object
              properties:
                totalFaults:
                  type: integer
                openFaults:
                  type: integer
                closedFaults:
                  type: integer
                averageResolutionTime:
                  type: number
                  description: Average time to resolve a fault (in hours)
                faultsBySeverity:
                  type: object
                  properties:
                    low:
                      type: integer
                    medium:
                      type: integer
                    high:
                      type: integer
                    critical:
                      type: integer
      401:
        description: Unauthorized